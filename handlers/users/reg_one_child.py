import asyncio
import os
from aiogram import types
from aiogram.dispatcher import FSMContext

from keyboards.inline import inline_buttons
from utils.misc import cyrillic_checker
from states.reg import RegOneChild
from loader import dp, vid, db, bot, BASE_DIR


@dp.callback_query_handler(text_contains = 'one_child', state="*")
async def cancel_handler(c: types.CallbackQuery, state: FSMContext):
    await c.answer()
    await c.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –ò–ú–Ø —Ä–µ–±—ë–Ω–∫–∞:")
    await RegOneChild.step1.set()


@dp.message_handler(state=RegOneChild.step1)
async def process_get_name(message: types.Message, state: FSMContext):
    u_names = [
        '–°–∞—à–∞', '–°–∞—à–µ–Ω—å–∫–∞', '–®—É—Ä–∞', '–®—É—Ä–æ—á–∫–∞', '–í–∞–ª—è', '–í–∞–ª–µ—á–∫–∞', '–í–∞–ª—é—à–∞', '–í–∞—Å—è', '–ñ–µ–Ω—è', '–ñ–µ–Ω–µ—á–∫–∞'
    ]

    if not cyrillic_checker.all_ru(message.text):
        await message.answer("–¢–æ–ª—å–∫–æ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π!")

    else:
        async with state.proxy() as data:
            data['name'] = message.text.title()

        if message.text.title() in u_names:
            await message.answer("–£—Ç–æ—á–Ω—è—é, —ç—Ç–æ –º—É–∂—Å–∫–æ–µ –∏–ª–∏ –∂–µ–Ω—Å–∫–æ–µ –∏–º—è?", reply_markup=inline_buttons.m_or_w())
            await RegOneChild.additive.set()

        else:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç:")
            await RegOneChild.next()


@dp.callback_query_handler(state=RegOneChild.additive)
async def process_get_wishes(c: types.CallbackQuery, state: FSMContext):
    m_names = {
        '–°–∞—à–∞': '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä',
        '–°–∞—à–µ–Ω—å–∫–∞': '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä',
        '–®—É—Ä–∞': '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä',
        '–®—É—Ä–æ—á–∫–∞': '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä',
        '–í–∞–ª—è': '–í–∞–ª–µ–Ω—Ç–∏–Ω',
        '–í–∞–ª–µ—á–∫–∞': '–í–∞–ª–µ–Ω—Ç–∏–Ω',
        '–í–∞–ª—é—à–∞': '–í–∞–ª–µ–Ω—Ç–∏–Ω',
        '–í–∞—Å—è': '–í–∞—Å–∏–ª–∏–π',
        '–ñ–µ–Ω—è': '–ï–≤–≥–µ–Ω–∏–π',
        '–ñ–µ–Ω–µ—á–∫–∞': '–ï–≤–≥–µ–Ω–∏–π'
    }

    f_names = {
        '–°–∞—à–∞': '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞',
        '–°–∞—à–µ–Ω—å–∫–∞': '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞',
        '–®—É—Ä–∞': '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞',
        '–®—É—Ä–æ—á–∫–∞': '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞',
        '–í–∞–ª—è': '–í–∞–ª–µ–Ω—Ç–∏–Ω–∞',
        '–í–∞–ª–µ—á–∫–∞': '–í–∞–ª–µ–Ω—Ç–∏–Ω–∞',
        '–í–∞–ª—é—à–∞': '–í–∞–ª–µ–Ω—Ç–∏–Ω–∞',
        '–í–∞—Å—è': '–í–∞—Å–∏–ª–∏—Å–∞',
        '–ñ–µ–Ω—è': '–ï–≤–≥–µ–Ω–∏—è',
        '–ñ–µ–Ω–µ—á–∫–∞': '–ï–≤–≥–µ–Ω–∏—è'
    }

    async with state.proxy() as data:
        data['gender'] = c.data

        if c.data == 'male':
            data['name'] = m_names[data['name']]

        else:
            data['name'] = f_names[data['name']]

    await c.message.delete()
    await c.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç:")
    await RegOneChild.step2.set()


@dp.message_handler(state=RegOneChild.step2)
async def process_get_age(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        if int(message.text) <= 0:
            await message.answer("–û –∫–∞–∫.) –î—Ä—É–≥, –æ–±—Ä–∞—â–∞–π—Å—è –∫–æ–≥–¥–∞ –ø–æ—è–≤–∏—à—å—Å—è –Ω–∞ —Å–≤–µ—Ç.")
        
        elif int(message.text) > 14:
            await message.answer("–ü—Ä–æ—Å—Ç–∏ –¥—Ä—É–∂–æ–∫, –¥–∞–≤–∞–π –ø–æ–∑–¥—Ä–∞–≤–∏–º –º–∞–ª—ã—à–µ–π.)")
        
        else:
            async with state.proxy() as data:
                data['age'] = int(message.text)
            await message.answer("–£–≤–ª–µ—á–µ–Ω–∏—è:", reply_markup=inline_buttons.choose_hobbies())
            await RegOneChild.next()


@dp.callback_query_handler(state=RegOneChild.step3)
async def process_get_hobbies(c: types.CallbackQuery, state: FSMContext):
    await c.answer()

    async with state.proxy() as data:
        data['hobbies'] = c.data
    await c.message.edit_text("–ü–æ–∂–µ–ª–∞–Ω–∏–µ:", reply_markup=inline_buttons.choose_wishes())
    await RegOneChild.next()


@dp.callback_query_handler(state=RegOneChild.step4)
async def process_get_wishes(c: types.CallbackQuery, state: FSMContext):
    await c.answer()

    async with state.proxy() as data:
        data['wishes'] = c.data
    await c.message.edit_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:", reply_markup=inline_buttons.get_congrats())
    await RegOneChild.next()


async def show_process(c: types.CallbackQuery):
    for i in range(11):
        msg = await c.message.edit_text(
            "–ú–∏–Ω—É—Ç–æ—á–∫—É, –î–µ–¥—É—à–∫–∞ –ú–æ—Ä–æ–∑ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤–∏–¥–µ–æ–ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ.\n"
            f"{('üü¶' * i) + ('‚óªÔ∏è' * (10 - i))}"
        )
        await asyncio.sleep(0.5)

    await msg.delete()
    return msg   
    
@dp.callback_query_handler(state=RegOneChild.step5)
async def process_get_wishes(c: types.CallbackQuery, state: FSMContext):
    task = asyncio.create_task(show_process(c))

    async with state.proxy() as data:
        name = data.get('name')
        gender = data.get('gender')
        age = data.get('age')
        hobbies = data.get('hobbies')
        wishes = data.get('wishes')

        if not gender:
            gender = 'male' if name in vid.name_m.keys() else 'female'

    bot_info = await bot.get_me()
    response = db.get_concat_one(name, gender, age, hobbies, wishes, bot_info.username)
    
    if response:
        await c.message.answer_video(
            video = response.file_id, 
            caption= "–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç –î–µ–¥—É—à–∫–∏ –ú–æ—Ä–æ–∑–∞\n"
                    "–í —Å–ª–æ–≤–∞—Ä–Ω–æ–º –∑–∞–ø–∞—Å–µ –î–µ–¥—É—à–∫–∏ –º–æ—Ä–æ–∑–∞ –Ω–µ –±—ã–ª–æ –∏–º–µ–Ω–∏, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –Ω–∞–∑–≤–∞–ª–∏. –ù–æ –æ–Ω –≤—Å—ë —Ä–∞–≤–Ω–æ –∑–∞–ø–∏—Å–∞–ª –Ω–æ–≤–æ–≥–æ–¥–Ω–µ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∏–¥–µ–æ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å.\n\n"

                    "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–≤–æ–≥–æ–¥–Ω–∏–º —á—É–¥–æ–º —Å –¥—Ä—É–∑—å—è–º–∏:"
        )
        await state.finish()

    else:
        user_id = c.from_user.id
        vid.generate_video_for_one_child(BASE_DIR, user_id, name, gender, age, hobbies, wishes)

        if await task:
            with open(f'{BASE_DIR}/staticfiles/videos/final/{user_id}.mp4', 'rb') as video:
                sended = await c.message.answer_video(
                    video = video,
                    caption =  f"–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è {name}\n"
                                "–°–∫–æ—Ä–µ–µ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ –∏ —Å–º–æ—Ç—Ä–∏—Ç–µ!\n\n"

                                "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–≤–æ–≥–æ–¥–Ω–∏–º —á—É–¥–æ–º —Å –¥—Ä—É–∑—å—è–º–∏:"
                )

            os.remove(f'{BASE_DIR}/staticfiles/videos/final/{user_id}.mp4')

            db.reg_new_concat(
                user_id = user_id,
                type = 'one',
                wishes = wishes,
                file_id = sended.video.file_id,
                bot_name = bot_info.username,
                name = name,
                age = age,
                hobbies = hobbies,
                gender = gender
            )

            await state.finish()
